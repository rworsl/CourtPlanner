version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: badminton_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://badminton:${POSTGRES_PASSWORD}@db:5432/badminton_db
      - REDIS_URL=redis://redis:6379/0
      # Stripe Configuration
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PROFESSIONAL_PRICE_ID=${STRIPE_PROFESSIONAL_PRICE_ID}
      - STRIPE_CLUB_PRICE_ID=${STRIPE_CLUB_PRICE_ID}
      # Demo Configuration
      - DEMO_RESET_INTERVAL=${DEMO_RESET_INTERVAL:-10}
    env_file:
      - .env
    volumes:
      - ./instance:/app/instance
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - db
      - redis
    networks:
      - badminton_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    container_name: badminton_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: badminton_db
      POSTGRES_USER: badminton
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/backups:/var/backups
    networks:
      - badminton_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U badminton"]
      interval: 30s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: badminton_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - badminton_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: badminton_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./static:/var/www/static
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - badminton_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Background job processor for demo cleanup and subscription management
  scheduler:
    build: 
      context: .
      dockerfile: Dockerfile.scheduler
    container_name: badminton_scheduler
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://badminton:${POSTGRES_PASSWORD}@db:5432/badminton_db
      - REDIS_URL=redis://redis:6379/0
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - badminton_network

  # Optional: Database backup service
  backup:
    image: postgres:15-alpine
    container_name: badminton_backup
    restart: "no"
    environment:
      POSTGRES_DB: badminton_db
      POSTGRES_USER: badminton
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - badminton_network
    entrypoint: /backup.sh
    profiles:
      - backup

  # Optional: Monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: badminton_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - badminton_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: badminton_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - badminton_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  badminton_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16